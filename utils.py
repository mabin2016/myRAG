import json
from pymilvus import connections, Collection, FieldSchema, Connections, utility, CollectionSchema, DataType


class MilvusHandler:
    def __init__(self, host="127.0.0.1", port=19530, collection_name="test", index_type="IVF_SQ8", nlist=1024, metric_type="L2", nprobe=8):
        self._HOST = host
        self._PORT = port
        self._INDEX_TYPE = index_type
        self._NLIST = nlist
        self._METRIC_TYPE = metric_type
        self._NPROBE = nprobe
        self.collection = self.create_connection(collection_name)

    def create_connection(self, collection_name):
        connections.connect(host=self._HOST, port=self._PORT)
        return Collection(name=collection_name)

    def create_collection(self, collection_name, schema, force):
        if self.has_collection(collection_name) and force:
            self.drop_collection(collection_name)
        self.collection = Collection(name=collection_name, data=None, schema=schema, properties={"collection.ttl.seconds": 15})

    # 判断是否存在名为name的集合
    def has_collection(self, name):
        return utility.has_collection(name)
    def drop_collection(self, name):
        collection = Collection(name)
        collection.drop()

    # 批量插入数据到指定集合中
    def bulk_insert(self, data_list):
        result = self.collection.insert(data=data_list)
        # result = self.collection.count_entities()
        return result

    # 创建索引
    def create_index(self, filed_name):
        index_param = {
            "index_type": self._INDEX_TYPE,
            "params": {"nlist": self._NLIST},
            "metric_type": self._METRIC_TYPE}
        self.collection.create_index(filed_name, index_param)

    # 加载集合
    def load_collection(self, collection):
        collection.load()

    # 释放集合
    def release_collection(self, collection):
        collection.release()

    # 在集合中搜索相似的向量
    def search(self, search_vectors, output_fields=None, expr=None, topk=10):
        search_param = {
            "data": search_vectors,
            "anns_field": "vector",
            "param": {"metric_type": self._METRIC_TYPE, "params": {"nprobe": self._NPROBE}},
            "limit": topk,
            "output_fields": output_fields,
            "expr": expr
        }
        results = self.collection.search(**search_param)
        return results


if __name__ == "__main__":
    collection_name="test"
    handler = MilvusHandler(collection_name=collection_name)

    fields = [
        FieldSchema(name="id", dtype=DataType.INT64, description="int64", auto_id=True, is_primary=True),
        FieldSchema(name="content", dtype=DataType.VARCHAR, description="content", max_length=128),
        FieldSchema(name="tags", dtype=DataType.JSON, description="tags json"),
        FieldSchema(name="vector", dtype=DataType.FLOAT_VECTOR, description="float vector", dim=128)
    ]
    schema = CollectionSchema(fields=fields, description="schema for demo")
    
    # handler.create_collection(collection_name=collection_name, schema=schema, force=True)
    # handler.create_index("vector")


    vector = [0.5215628147125244,0.19234521687030792,0.9483458995819092,0.611928403377533,0.721379816532135,0.2380427122116089,0.14991067349910736,0.2790454626083374,0.37790966033935547,0.5125697255134583,0.5208577513694763,0.7216926217079163,0.3137558102607727,0.8969436287879944,0.41546830534935,0.11946427822113037,0.9411752223968506,0.8874846696853638,0.07698637992143631,0.908623456954956,0.31958433985710144,0.9665228128433228,0.35503658652305603,0.8356581926345825,0.7694583535194397,0.669795036315918,0.5554687976837158,0.28662538528442383,0.6697412133216858,0.4775960445404053,0.9678680896759033,0.004695276264101267,0.4188811182975769,0.8267391324043274,0.7734102010726929,0.7932949066162109,0.7087979316711426,0.5727004408836365,0.23076102137565613,0.2818571925163269,0.947953462600708,0.8970108032226562,0.047301944345235825,0.8336315751075745,0.5898021459579468,0.23347559571266174,0.30407389998435974,0.5037423372268677,0.5597046613693237,0.4444675147533417,0.27885469794273376,0.6579888463020325,0.47091737389564514,0.9219841361045837,0.7431040406227112,0.14839714765548706,0.7538219690322876,0.6463307738304138,0.6745592951774597,0.8612672686576843,0.01786518655717373,0.8654056787490845,0.7414736747741699,0.5916818976402283,0.3234638273715973,0.5084169507026672,0.5681145787239075,0.31921955943107605,0.4254489243030548,0.20556873083114624,0.04944482445716858,0.6335689425468445,0.7589321136474609,0.2922648787498474,0.715823769569397,0.7891464233398438,0.9819150567054749,0.48619771003723145,0.2557602822780609,0.29601359367370605,0.12182742357254028,0.3298918902873993,0.43131446838378906,0.25669437646865845,0.020727531984448433,0.20759351551532745,0.22152985632419586,0.04422667995095253,0.20061221718788147,0.4296407103538513,0.04533158987760544,0.09708423167467117,0.9008538126945496,0.9884501695632935,0.39084821939468384,0.6708313226699829,0.05316437408328056,0.06744939088821411,0.7439110279083252,0.9744813442230225,0.9804955720901489,0.9632779955863953,0.034772008657455444,0.19971412420272827,0.15541554987430573,0.7108240127563477,0.2730560898780823,0.6173858046531677,0.017963165417313576,0.3820338547229767,0.4366767108440399,0.2247619777917862,0.45288121700286865,0.6993964314460754,0.37882131338119507,0.22535410523414612,0.8631449937820435,0.30879172682762146,0.3285163938999176,0.5681285858154297,0.06802123039960861,0.44209471344947815,0.09995759278535843,0.6726042628288269,0.3578214943408966,0.30913734436035156,0.6748225688934326,0.42580828070640564]
    vector2 = [0.32723861932754517,0.12924470007419586,0.1889057159423828,0.33915773034095764,0.6841977834701538,0.3916347324848175,0.13090915977954865,0.14082682132720947,0.15606486797332764,0.6597411036491394,0.5258100032806396,0.11345825344324112,0.7603436708450317,0.45560526847839355,0.5179380178451538,0.29784855246543884,0.7912768721580505,0.5703591108322144,0.4963154196739197,0.8627508878707886,0.44249191880226135,0.11244866251945496,0.9032413363456726,0.6511412858963013,0.8961830735206604,0.41163086891174316,0.381241112947464,0.805614173412323,0.8152948021888733,0.5913171172142029,0.176690012216568,0.034987546503543854,0.1858529895544052,0.462070107460022,0.2936961352825165,0.5301322937011719,0.5472983121871948,0.9938991665840149,0.5468227863311768,0.6110484600067139,0.764600396156311,0.8861255049705505,0.5458049178123474,0.3197801411151886,0.15985430777072906,0.16513431072235107,0.48702505230903625,0.3854522407054901,0.7308140397071838,0.004839879460632801,0.07002419978380203,0.5509195327758789,0.6463128328323364,0.7013272047042847,0.37007936835289,0.38253986835479736,0.6141501665115356,0.27532288432121277,0.8393346071243286,0.3748132884502411,0.9171066880226135,0.8105266094207764,0.9874663949012756,0.20826050639152527,0.1167895570397377,0.6998502612113953,0.8073835372924805,0.8966501951217651,0.7711592316627502,0.5439373254776001,0.11669596284627914,0.6710184812545776,0.3059777319431305,0.9548929929733276,0.2648945450782776,0.7810477018356323,0.20860035717487335,0.9697363376617432,0.6901208758354187,0.45365437865257263,0.6866923570632935,0.22001953423023224,0.6913774609565735,0.47512394189834595,0.1783432811498642,0.9258989691734314,0.8735616207122803,0.12313617020845413,0.26719170808792114,0.8824324607849121,0.5169672966003418,0.7343441247940063,0.8964272737503052,0.6386746764183044,0.3665395677089691,0.37468212842941284,0.5405782461166382,0.39917290210723877,0.18039950728416443,0.6705961227416992,0.776716947555542,0.012419143691658974,0.23252201080322266,0.042245011776685715,0.6370273232460022,0.936316728591919,0.006863616406917572,0.003704219590872526,0.02286875620484352,0.1439281404018402,0.23370812833309174,0.5667998194694519,0.23493675887584686,0.7820139527320862,0.5182254910469055,0.4011513292789459,0.608252763748169,0.3828481435775757,0.9269286394119263,0.07355237752199173,0.016701368615031242,0.8231252431869507,0.7219299077987671,0.19521237909793854,0.6851091980934143,0.8377978205680847,0.4287816882133484,0.5080888867378235]
    data_list = [
        {"content": "sample1", "tags": {"tag": "test11", "tag2": "test22"}, "vector": vector},
        {"content": "sample2", "tags": {"tag": "test111", "tag2": "test222"}, "vector": vector2},
    ]
    # data_list = [
    #     ["ccc", "ddd"],
    #     [{"tag": "test11", "tag2": "test22"}, {"tag": "test11", "tag2": "test22"}],
    #     [vector, vector2]
    # ]
    # result = handler.bulk_insert(data_list)
    # print("result: ", result, "\n")

    expr = 'tags["tag"] in ["test11"]'
    # expr = None
    output_fields = ["content", "tags"]
    res = handler.search([vector], output_fields, expr)
    print(res)
    
    for i, result in enumerate(res):
        for j, res in enumerate(result):
            print("Top {}: {}".format(j, res))

